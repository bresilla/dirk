//inspired by https://github.com/briandowns/spinner
package dirk

import (
	"encoding/hex"
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"time"
	"unicode/utf8"

	"github.com/fatih/color"
)

var SpinnerSets = map[int][]string{
	0:  {"‚Üê", "‚Üñ", "‚Üë", "‚Üó", "‚Üí", "‚Üò", "‚Üì", "‚Üô"},
	1:  {"‚ñÅ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà", "‚ñá", "‚ñÜ", "‚ñÖ", "‚ñÑ", "‚ñÉ", "‚ñÅ"},
	2:  {"‚ññ", "‚ñò", "‚ñù", "‚ñó"},
	3:  {"‚î§", "‚îò", "‚î¥", "‚îî", "‚îú", "‚îå", "‚î¨", "‚îê"},
	4:  {"‚ó¢", "‚ó£", "‚ó§", "‚ó•"},
	5:  {"‚ó∞", "‚ó≥", "‚ó≤", "‚ó±"},
	6:  {"‚ó¥", "‚ó∑", "‚ó∂", "‚óµ"},
	7:  {"‚óê", "‚óì", "‚óë", "‚óí"},
	8:  {".", "o", "O", "@", "*"},
	9:  {"|", "/", "-", "\\"},
	10: {"‚ó°‚ó°", "‚äô‚äô", "‚ó†‚ó†"},
	11: {"‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"},
	12: {">))'>", " >))'>", "  >))'>", "   >))'>", "    >))'>", "   <'((<", "  <'((<", " <'((<"},
	13: {"‚†Å", "‚†Ç", "‚†Ñ", "‚°Ä", "‚¢Ä", "‚††", "‚†ê", "‚†à"},
	14: {"‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"},
	15: {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"},
	16: {"‚ñâ", "‚ñä", "‚ñã", "‚ñå", "‚ñç", "‚ñé", "‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ"},
	17: {"‚ñ†", "‚ñ°", "‚ñ™", "‚ñ´"},
	18: {"‚Üê", "‚Üë", "‚Üí", "‚Üì"},
	19: {"‚ï´", "‚ï™"},
	20: {"‚áê", "‚áñ", "‚áë", "‚áó", "‚áí", "‚áò", "‚áì", "‚áô"},
	21: {"‚†Å", "‚†Å", "‚†â", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†§", "‚†Ñ", "‚†Ñ", "‚†§", "‚††", "‚††", "‚†§", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã", "‚†â", "‚†à", "‚†à"},
	22: {"‚†à", "‚†â", "‚†ã", "‚†ì", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ñ", "‚†¶", "‚†§", "‚††", "‚††", "‚†§", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã", "‚†â", "‚†à"},
	23: {"‚†Å", "‚†â", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†§", "‚†Ñ", "‚†Ñ", "‚†§", "‚†¥", "‚†≤", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†ö", "‚†ô", "‚†â", "‚†Å"},
	24: {"‚†ã", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã"},
	25: {"ÔΩ¶", "ÔΩß", "ÔΩ®", "ÔΩ©", "ÔΩ™", "ÔΩ´", "ÔΩ¨", "ÔΩ≠", "ÔΩÆ", "ÔΩØ", "ÔΩ±", "ÔΩ≤", "ÔΩ≥", "ÔΩ¥", "ÔΩµ", "ÔΩ∂", "ÔΩ∑", "ÔΩ∏", "ÔΩπ", "ÔΩ∫", "ÔΩª", "ÔΩº", "ÔΩΩ", "ÔΩæ", "ÔΩø", "ÔæÄ", "ÔæÅ", "ÔæÇ", "ÔæÉ", "ÔæÑ", "ÔæÖ", "ÔæÜ", "Ôæá", "Ôæà", "Ôæâ", "Ôæä", "Ôæã", "Ôæå", "Ôæç", "Ôæé", "Ôæè", "Ôæê", "Ôæë", "Ôæí", "Ôæì", "Ôæî", "Ôæï", "Ôæñ", "Ôæó", "Ôæò", "Ôæô", "Ôæö", "Ôæõ", "Ôæú", "Ôæù"},
	26: {".", "..", "..."},
	27: {"‚ñÅ", "‚ñÇ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà", "‚ñâ", "‚ñä", "‚ñã", "‚ñå", "‚ñç", "‚ñé", "‚ñè", "‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ", "‚ñà", "‚ñá", "‚ñÜ", "‚ñÖ", "‚ñÑ", "‚ñÉ", "‚ñÇ", "‚ñÅ"},
	28: {".", "o", "O", "¬∞", "O", "o", "."},
	29: {"+", "x"},
	30: {"v", "<", "^", ">"},
	31: {"üåç", "üåé", "üåè"},
	32: {"‚óú", "‚óù", "‚óû", "‚óü"},
	33: {"‚¨í", "‚¨î", "‚¨ì", "‚¨ï"},
	34: {"‚¨ñ", "‚¨ò", "‚¨ó", "‚¨ô"},
	35: {"‚ô†", "‚ô£", "‚ô•", "‚ô¶"},
}

// Spinner struct to hold the provided options
type Spinner struct {
	Percent    int
	Delay      time.Duration                 // Delay is the speed of the indicator
	chars      []string                      // chars holds the chosen character set
	Prefix     string                        // Prefix is the text preppended to the indicator
	Suffix     string                        // Suffix is the text appended to the indicator
	lastOutput string                        // last character(set) written
	color      func(a ...interface{}) string // default color is white
	lock       *sync.RWMutex                 //
	Writer     io.Writer                     // to make testing better, exported so users have access
	active     bool                          // active holds the state of the spinner
	stopChan   chan struct{}                 // stopChan is a channel used to stop the indicator
}

// New provides a pointer to an instance of Spinner with the supplied options
func NewSpinner(cs []string, d time.Duration, i int) *Spinner {
	s := &Spinner{
		Delay:    d,
		Percent:  i,
		chars:    cs,
		color:    color.New(color.FgWhite).SprintFunc(),
		lock:     &sync.RWMutex{},
		Writer:   color.Output,
		active:   false,
		stopChan: make(chan struct{}, 1),
	}
	return s
}

// Active will return whether or not the spinner is currently active
func (s *Spinner) Active() bool {
	return s.active
}

// Start will start the indicator
func (s *Spinner) Start() {
	s.lock.Lock()
	if s.active {
		s.lock.Unlock()
		return
	}
	s.active = true
	s.lock.Unlock()

	go func() {
		for {
			for i := 0; i < len(s.chars); i++ {
				select {
				case <-s.stopChan:
					return
				default:
					s.lock.Lock()
					s.erase()
					var outColor string
					if runtime.GOOS == "windows" {
						if s.Writer == os.Stderr {
							outColor = fmt.Sprintf("\r%s%s%s ", s.Prefix, s.chars[i], s.Suffix)
						} else {
							outColor = fmt.Sprintf("\r%s%s%s ", s.Prefix, s.color(s.chars[i]), s.Suffix)
						}
					} else {
						outColor = fmt.Sprintf("%s%s%s ", s.Prefix, s.color(s.chars[i]), s.Suffix)
					}
					outPlain := fmt.Sprintf("%s%s%s ", s.Prefix, s.chars[i], s.Suffix)
					fmt.Fprint(s.Writer, outColor)
					s.lastOutput = outPlain
					delay := s.Delay
					s.lock.Unlock()

					time.Sleep(delay)
				}
			}
		}
	}()
}

// Stop stops the indicator
func (s *Spinner) Stop() {
	s.lock.Lock()
	defer s.lock.Unlock()
	if s.active {
		s.active = false
		s.erase()
		s.stopChan <- struct{}{}
	}
}

// Restart will stop and start the indicator
func (s *Spinner) Restart() {
	s.Stop()
	s.Start()
}

// Reverse will reverse the order of the slice assigned to the indicator
func (s *Spinner) Reverse() {
	s.lock.Lock()
	defer s.lock.Unlock()
	for i, j := 0, len(s.chars)-1; i < j; i, j = i+1, j-1 {
		s.chars[i], s.chars[j] = s.chars[j], s.chars[i]
	}
}

// Color will set the struct field for the given color to be used
func (s *Spinner) Color(colors ...string) error {
	colorAttributes := make([]color.Attribute, len(colors))
	s.color = color.New(colorAttributes...).SprintFunc()
	s.Restart()
	return nil
}

// UpdateSpeed will set the indicator delay to the given value
func (s *Spinner) UpdateSpeed(d time.Duration) {
	s.lock.Lock()
	defer s.lock.Unlock()
	s.Delay = d
}

// UpdateCharSet will change the current character set to the given one
func (s *Spinner) UpdateCharSet(cs []string) {
	s.lock.Lock()
	defer s.lock.Unlock()
	s.chars = cs
}

// erase deletes written characters
func (s *Spinner) erase() {
	n := utf8.RuneCountInString(s.lastOutput)
	if runtime.GOOS == "windows" {
		clearString := "\r"
		for i := 0; i < n; i++ {
			clearString += " "
		}
		fmt.Fprintf(s.Writer, clearString)
		return
	}
	del, _ := hex.DecodeString("7f")
	for _, c := range []string{
		"\b",
		string(del),
		"\b",
		"\033[K", // for macOS Terminal
	} {
		for i := 0; i < n; i++ {
			fmt.Fprintf(s.Writer, c)
		}
	}
	s.lastOutput = ""
}
